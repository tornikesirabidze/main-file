'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var index = require('./components/Buttons/index.js');
var HeroSlider_module = require('./HeroSlider.module.css.js');
var Accessibility = require('./modules/Accessibility.js');
var Animations = require('./modules/Animations.js');
var Autoplay = require('./modules/Autoplay.js');
var ConsoleLogger = require('./modules/ConsoleLogger.js');
var Controller = require('./modules/Controller.js');
var IntersectionObserver = require('./modules/IntersectionObserver.js');
var Layout = require('./modules/Layout.js');
var Settings = require('./modules/Settings.js');
var composeCssClasses = require('./utils/composeCssClasses.js');

const logger = ConsoleLogger["default"].new();
function Orchestrator({ className, width = '100%', height = '100vh', style, children }) {
    logger.info('[Orchestrator] rerender');
    const { shouldDisplayButtons } = Accessibility.useAccessibility();
    const { sliderFadeInDuration, navbarFadeInDuration, navbarFadeInDelay } = Animations.useAnimations();
    const { state: layout } = Layout.useLayout();
    const { slidingDuration, slidingDelay, getSlidingCycleDuration } = Controller.useController();
    const settings = Settings.useSettings();
    const { debounce } = Autoplay.useAutoplay();
    const { onTouchStartHandler, onTouchMoveHandler, onTouchEndHandler } = Accessibility.useAccessibility();
    const { elementObservedRef } = IntersectionObserver.useIntersectionObserver();
    /**
     * CSS variables for the transitions.
     */
    const cssVariables = {
        '--sliding-duration': `${slidingDuration}ms`,
        '--sliding-delay': `${slidingDelay}ms`,
        '--slide-transition-delay': `${getSlidingCycleDuration()}ms`,
        '--slider-width': layout.width ? `${layout.width}px` : undefined,
        '--slider-height': layout.height ? `${layout.height}px` : undefined,
        '--slider-color': settings.sliderColor,
        '--slider-fade-in-duration': `${sliderFadeInDuration}ms`,
        '--nav-fade-in-duration': `${navbarFadeInDuration}ms`,
        '--nav-fade-in-delay': `${navbarFadeInDelay}ms`,
        '--nav-background-color': settings.navbarStyle
            ? settings.navbarStyle.color
            : undefined,
        '--nav-active-color': settings.navbarStyle
            ? settings.navbarStyle.activeColor
            : undefined,
        '--mask-duration': `${getSlidingCycleDuration()}ms`
    };
    return (jsxRuntime.jsx("div", Object.assign({ "data-testid": "hero-slider", className: composeCssClasses.composeCssClasses('hero-slider', className), ref: elementObservedRef }, { children: jsxRuntime.jsxs("div", Object.assign({ "data-testid": "hero-slider-wrapper", ref: layout.slider, className: composeCssClasses.composeCssClasses('hero-slider-wrapper', HeroSlider_module["default"].Wrapper), onTouchStart: onTouchStartHandler, onTouchMove: onTouchMoveHandler, onTouchEnd: onTouchEndHandler, onMouseMoveCapture: debounce, style: Object.assign(Object.assign(Object.assign({}, cssVariables), style), { width,
                height }) }, { children: [children, shouldDisplayButtons && jsxRuntime.jsx(index["default"], {})] })) })));
}

exports.Orchestrator = Orchestrator;
//# sourceMappingURL=Orchestrator.js.map
