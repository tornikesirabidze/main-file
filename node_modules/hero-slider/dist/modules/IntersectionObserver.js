'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactIntersectionObserver_modern = require('../node_modules/.pnpm/react-intersection-observer@9.4.0_react@18.2.0/node_modules/react-intersection-observer/react-intersection-observer.modern.mjs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const IntersectionObserverStateContext = React__default["default"].createContext(undefined);
function IntersectionObserverProvider({ children }) {
    const [ref, inView] = reactIntersectionObserver_modern.useInView({ threshold: 0 });
    // NOTE: you *might* need to memoize this value
    // Learn more in http://kcd.im/optimize-context
    const value = {
        elementObservedRef: ref,
        isInView: inView
    };
    return (jsxRuntime.jsx(IntersectionObserverStateContext.Provider, Object.assign({ value: value }, { children: children })));
}
function useIntersectionObserver() {
    const context = React__default["default"].useContext(IntersectionObserverStateContext);
    if (context === undefined) {
        throw new Error('useIntersectionObserver must be used within a IntersectionObserverProvider');
    }
    return context;
}

exports.IntersectionObserverProvider = IntersectionObserverProvider;
exports.useIntersectionObserver = useIntersectionObserver;
//# sourceMappingURL=IntersectionObserver.js.map
