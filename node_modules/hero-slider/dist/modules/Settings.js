'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var ConsoleLogger = require('./ConsoleLogger.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const defaultProps = {
    sliderColor: 'inherit',
    sliderStyle: {},
    navbarStyle: {
        color: undefined,
        activeColor: undefined
    }
};
const SettingsStateContext = React__default["default"].createContext(undefined);
function SettingsProvider({ children, settings }) {
    const params = {
        sliderColor: (settings === null || settings === void 0 ? void 0 : settings.sliderColor) || defaultProps.sliderColor,
        sliderStyle: (settings === null || settings === void 0 ? void 0 : settings.sliderStyle) || defaultProps.sliderStyle,
        navbarStyle: (settings === null || settings === void 0 ? void 0 : settings.navbarStyle) || defaultProps.navbarStyle,
        debug: settings === null || settings === void 0 ? void 0 : settings.debug
    };
    /**
     * Set up ConsoleLogger whenever the `params.debug` change.
     */
    React__default["default"].useEffect(() => {
        ConsoleLogger["default"].new(params.debug);
    }, [params.debug]);
    // NOTE: you *might* need to memoize this value
    // Learn more in http://kcd.im/optimize-context
    const value = params;
    return (jsxRuntime.jsx(SettingsStateContext.Provider, Object.assign({ value: value }, { children: children })));
}
function useSettings() {
    const context = React__default["default"].useContext(SettingsStateContext);
    if (context === undefined) {
        throw new Error('useSettings must be used within a SettingsProvider');
    }
    return context;
}

exports.SettingsProvider = SettingsProvider;
exports.useSettings = useSettings;
//# sourceMappingURL=Settings.js.map
