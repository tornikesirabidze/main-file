'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var Animations = require('../../modules/Animations.js');
var ConsoleLogger = require('../../modules/ConsoleLogger.js');
var Controller = require('../../modules/Controller.js');
var Manager = require('../../modules/Manager.js');
var composeCssClasses = require('../../utils/composeCssClasses.js');
var index = require('./Background/index.js');
var index_module = require('./index.module.css.js');
var index$1 = require('./Mask/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const logger = ConsoleLogger["default"].new();
function Slide(props) {
    const { className, shouldRenderMask = false, style, background, onBackgroundLoad, children, label } = props;
    const { getSlide, registerSlide, removeSlide } = Manager.useManager();
    const { state: { activeSlide, isSliding, prevActiveSlide, slidingDirection } } = Controller.useController();
    const { getSlidingAnimationCssClass } = Animations.useAnimations();
    const slideRef = React__default["default"].useRef(null);
    const slide = getSlide(slideRef);
    logger.info('[Slide] rerender', 'slide.number: ', slide === null || slide === void 0 ? void 0 : slide.number);
    const [classNames, setClassNames] = React__default["default"].useState(composeCssClasses.composeCssClasses('hero-slider-slide', index_module["default"].Slide, className));
    const isActive = activeSlide === (slide === null || slide === void 0 ? void 0 : slide.number);
    React__default["default"].useEffect(() => {
        if (slide) {
            setClassNames(composeCssClasses.composeCssClasses('hero-slider-slide', index_module["default"].Slide, { className: index_module["default"].Active, useIf: isActive }, { className: index_module["default"].Sliding, useIf: isActive && !isSliding }, {
                className: getSlidingAnimationCssClass(slide.number, prevActiveSlide, slidingDirection),
                useIf: isActive && isSliding
            }));
        }
    }, [isActive, isSliding]);
    React__default["default"].useEffect(() => {
        if (slideRef)
            registerSlide(slideRef, label);
        return () => {
            if (slideRef)
                removeSlide(slideRef);
        };
    }, []);
    if (!slide)
        return null;
    /**
     * CSS variables for the transitions.
     */
    const CSSVariables = {
        '--background-animation-duration': (background === null || background === void 0 ? void 0 : background.backgroundAnimationDuration)
            ? `${background.backgroundAnimationDuration}ms`
            : null,
        '--background-animation-delay': (background === null || background === void 0 ? void 0 : background.backgroundAnimationDelay)
            ? `${background.backgroundAnimationDelay}ms`
            : null
    };
    const isHidden = isSliding
        ? slide.number !== activeSlide && slide.number !== prevActiveSlide
        : slide.number !== activeSlide;
    return (jsxRuntime.jsxs("div", Object.assign({ "data-testid": `hero-slider-slide-${slide.number}`, ref: slideRef, hidden: isHidden, className: classNames, style: Object.assign(Object.assign({}, style), CSSVariables) }, { children: [jsxRuntime.jsx(index["default"], Object.assign({}, background, { onLoad: onBackgroundLoad })), jsxRuntime.jsxs("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-slide-wrapper', index_module["default"].Wrapper) }, { children: [shouldRenderMask ? (jsxRuntime.jsx(index$1["default"], { background: background, isActive: isActive })) : null, jsxRuntime.jsx("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-slide-container', index_module["default"].Container, {
                            className: index_module["default"].Active,
                            useIf: isActive && !isSliding
                        }) }, { children: children }))] }))] })));
}
Slide.displayName = 'hero-slider/slide';

exports.Slide = Slide;
//# sourceMappingURL=index.js.map
