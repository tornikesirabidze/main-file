'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var Controller = require('../../modules/Controller.js');
var Layout = require('../../modules/Layout.js');
var Manager = require('../../modules/Manager.js');
var composeCssClasses = require('../../utils/composeCssClasses.js');
var index = require('../Nav/index.js');
var index_module = require('./index.module.css.js');

function ButtonsNav(props) {
    const { color, activeColor, backgroundColor, position = {
        bottom: '0',
        left: '50%',
        transform: 'translateX(-50%)'
    }, justifyContent, alignItems, mobileThreshold: componentMobileThreshold, isNullAfterThreshold = false, extraButton, isExtraButtonRight } = props;
    const { state: { width }, mobileThreshold } = Layout.useLayout();
    const { state: { slides, totalSlides } } = Manager.useManager();
    const { state: { activeSlide }, changeSlide } = Controller.useController();
    /**
     * CSS variables for the transitions.
     */
    const CSSVariables = {
        '--nav-color': color,
        '--nav-background-color': backgroundColor,
        '--nav-active-color': activeColor
    };
    if (Number(width) <= (componentMobileThreshold !== null && componentMobileThreshold !== void 0 ? componentMobileThreshold : mobileThreshold)) {
        if (isNullAfterThreshold)
            return null;
        return jsxRuntime.jsx(index.Nav, Object.assign({}, props));
    }
    function renderButtons() {
        if (!totalSlides)
            return [];
        const onClickHandler = (slideNumber) => {
            if (slideNumber !== activeSlide)
                changeSlide(slideNumber);
        };
        return Array.from(slides.values()).map(({ number, label }) => {
            const description = label;
            return (
            // TODO: Deal with the disabled linting later:
            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions
            jsxRuntime.jsx("li", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-button', index_module["default"].Button, {
                    className: index_module["default"].Active,
                    useIf: activeSlide === number
                }), onClick: () => onClickHandler(number) }, { children: jsxRuntime.jsx("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-button-description', index_module["default"].Description) }, { children: jsxRuntime.jsx("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-button-text', index_module["default"].Text) }, { children: description })) })) }), number));
        });
    }
    return (jsxRuntime.jsx("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-wrapper', index_module["default"].Wrapper), style: Object.assign(Object.assign({}, position), CSSVariables) }, { children: jsxRuntime.jsxs("ul", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-container', index_module["default"].Container), style: {
                justifyContent: justifyContent || 'center',
                /**
                 * The **vertical alignment** of the buttons can be set manually.
                 * If it's undefined and if there is a position top passed as prop,
                 * then `alignItems` will be `flex-start`. Otherwise,
                 * it is set as `flex-end`.
                 */
                alignItems: alignItems ||
                    (position.top !== undefined ? 'flex-start' : 'flex-end')
            } }, { children: [renderButtons(), extraButton && (jsxRuntime.jsx("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-extra-button', index_module["default"].ExtraButton), style: {
                        order: isExtraButtonRight ? 1 : 0
                    } }, { children: extraButton })))] })) })));
}
ButtonsNav.displayName = 'hero-slider/buttons-nav';

exports.ButtonsNav = ButtonsNav;
//# sourceMappingURL=index.js.map
