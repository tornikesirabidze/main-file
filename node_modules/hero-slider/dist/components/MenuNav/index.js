'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var Controller = require('../../modules/Controller.js');
var Layout = require('../../modules/Layout.js');
var Manager = require('../../modules/Manager.js');
var composeCssClasses = require('../../utils/composeCssClasses.js');
var index = require('../Nav/index.js');
var index_module = require('./index.module.css.js');

function MenuNav(props) {
    const { color, activeColor, position = {
        bottom: '0',
        left: '50%',
        transform: 'translateX(-50%)'
    }, justifyContent = 'center', mobileThreshold: componentMobileThreshold, isNullAfterThreshold, extraButton, isExtraButtonRight = true } = props;
    const { state: { width }, mobileThreshold } = Layout.useLayout();
    const { state: { slides, totalSlides } } = Manager.useManager();
    const { state: { activeSlide }, changeSlide } = Controller.useController();
    if (Number(width) <= (componentMobileThreshold !== null && componentMobileThreshold !== void 0 ? componentMobileThreshold : mobileThreshold)) {
        if (isNullAfterThreshold)
            return null;
        return jsxRuntime.jsx(index.Nav, Object.assign({}, props));
    }
    function renderButtons() {
        if (!totalSlides)
            return [];
        const onClickHandler = (slideNumber) => {
            if (slideNumber !== activeSlide)
                changeSlide(slideNumber);
        };
        return Array.from(slides.values()).map(({ label, number }, index) => {
            const description = label;
            return (
            // TODO: Deal with the disabled linting later:
            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions
            jsxRuntime.jsx("li", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button', index_module["default"].Button, {
                    className: index_module["default"].Active,
                    useIf: activeSlide === number
                }), onClick: () => onClickHandler(number) }, { children: jsxRuntime.jsxs("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-description', index_module["default"].Description) }, { children: [jsxRuntime.jsxs("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-number', index_module["default"].Number) }, { children: [number, jsxRuntime.jsx("span", { className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-square', index_module["default"].Square) })] })), jsxRuntime.jsx("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-text', index_module["default"].Text) }, { children: description }))] })) }), index));
        });
    }
    /**
     * CSS variables for the transitions.
     */
    const CSSVariables = {
        '--nav-color': color,
        '--nav-active-color': activeColor
    };
    return (jsxRuntime.jsxs("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-wrapper', index_module["default"].Wrapper), style: Object.assign(Object.assign(Object.assign({}, position), CSSVariables), { justifyContent }) }, { children: [extraButton && (jsxRuntime.jsx("div", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-extra', index_module["default"].Extra), style: {
                    order: isExtraButtonRight ? 1 : 0
                } }, { children: jsxRuntime.jsx("span", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-extra-button', index_module["default"].ExtraButton), style: {
                        borderLeft: isExtraButtonRight
                            ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))'
                            : undefined,
                        borderRight: !isExtraButtonRight
                            ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))'
                            : undefined
                    } }, { children: extraButton })) }))), jsxRuntime.jsxs("ul", Object.assign({ className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-container', index_module["default"].Container) }, { children: [renderButtons(), jsxRuntime.jsx("span", { className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-bar', index_module["default"].Bar), style: {
                            width: `${100 / totalSlides}%`,
                            transform: `translate3d(${activeSlide - 1}00%, 0, 0)`
                        } })] }))] })));
}
MenuNav.displayName = 'hero-slider/menu-nav';

exports.MenuNav = MenuNav;
//# sourceMappingURL=index.js.map
